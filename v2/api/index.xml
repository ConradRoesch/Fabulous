<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Reference on</title><link>https://docs.fabulous.dev/v2/api/</link><description>Recent content in API Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://docs.fabulous.dev/v2/api/index.xml" rel="self" type="application/rss+xml"/><item><title>AnyView</title><link>https://docs.fabulous.dev/v2/api/any-view/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/any-view/</guid><description>AnyView allows changing the type of view used in a given view hierarchy. Whenever the type of view used with an AnyView changes.
Constructors # Constructors Description AnyView&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker when &amp;lsquo;marker :&amp;gt; IView&amp;gt;(widget: WidgetBuilder&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker&amp;gt;) Downcast to IView to allow to return different types of views in a single expression (e.g. if/else, match with pattern, etc.) AnyView&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker when &amp;lsquo;marker :&amp;gt; IPage&amp;gt;(widget: WidgetBuilder&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker&amp;gt;) Downcast to IPage to allow to return different types of pages in a single expression (e.</description></item><item><title>Application</title><link>https://docs.fabulous.dev/v2/api/application/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/application/</guid><description>Inheritance: Element
Xamarin.Forms documentation: Application API
Constructors # Constructors Description Application&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker when &amp;lsquo;marker :&amp;gt; IPage&amp;gt;(mainPage: WidgetBuilder&amp;lt;&amp;lsquo;msg, &amp;lsquo;marker&amp;gt;) Creates a new instance of the Application with a Page Properties # Properties Description userAppTheme(value: OSAppTheme) Sets the application theme. resources(value: ResourceDictionary) Sets the global resources for the application. reference(value: ViewRef&amp;lt;Application&amp;gt;) Sets a ViewRef instance to retrieve the Xamarin.</description></item><item><title>Creating and extending controls</title><link>https://docs.fabulous.dev/v2/api/extending-controls/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/extending-controls/</guid><description>Here, we will explain how to use custom controls with Fabulous.
If you are wondering about how to create custom controls, please take a look at the Xamarin.Forms documentation: Customizing an Entry
Once you implemented a custom control with Xamarin.Forms, you&amp;rsquo;ll need a wrapper to be able to use it in Fabulous.
Fortunately, creating a wrapper is pretty straightforward.
// Step 1 - declare a marker for your custom control // Make it inherit the right marker to automatically inherit all existing modifiers (such as Height/Width, Text, etc.</description></item><item><title>NavigableElement</title><link>https://docs.fabulous.dev/v2/api/navigable-element/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/navigable-element/</guid><description>Inheritance: Element
Xamarin.Forms documentation: NavigableElement API
Constructors # This control can&amp;rsquo;t be instantiated on its own. Its properties and events are inherited by its descendants.
Properties # TBD
Events # TBD</description></item><item><title>View</title><link>https://docs.fabulous.dev/v2/api/view/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/view/</guid><description>Inheritance: Element -&amp;gt; NavigableElement -&amp;gt; VisualElement
Xamarin.Forms documentation: View API
Constructors # This control can&amp;rsquo;t be instantiated on its own. Its properties and events are inherited by its descendants.
Properties # Properties Description horizontalOptions(value: LayoutOptions) Sets the LayoutOptions that define how the element gets laid horizontally in a layout cycle. verticalOptions(value: LayoutOptions) Sets the LayoutOptions that define how the element gets laid vertically in a layout cycle.</description></item><item><title>VisualElement</title><link>https://docs.fabulous.dev/v2/api/visual-element/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v2/api/visual-element/</guid><description>Inheritance: Element -&amp;gt; NavigableElement
Xamarin.Forms documentation: VisualElement API
Constructors # This control can&amp;rsquo;t be instantiated on its own. Its properties and events are inherited by its descendants.
Properties # Properties Description anchorX(value: float) Sets the horizontal anchor of the element. anchorY(value: float) Sets the vertical anchor of the element. backgroundColor(light: FabColor, ?dark: FabColor) background(light: FabColor, ?dark: FabColor) clip(content: WidgetBuilder&amp;lt;&amp;lsquo;msg, &amp;lsquo;contentMarker&amp;gt;) Defines the outline of the contents of an element.</description></item></channel></rss>