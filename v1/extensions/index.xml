<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extensions on</title><link>https://docs.fabulous.dev/v1/extensions/</link><description>Recent content in Extensions on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.fabulous.dev/v1/extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>FFImageLoading</title><link>https://docs.fabulous.dev/v1/extensions/ffimageloading/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/extensions/ffimageloading/</guid><description>The FFImageLoading plugin allows you to cache images as opposed to wasting time and memory with the built-in Image view. Using FFImageLoading, you have an easy way to cache images in your Fabulous.XamarinForms application.
FFImageLoading was created by Daniel Luberda and Fabien Molinet. The original project can be found in this github repository.
The nuget Fabulous.XamarinForms.FFImageLoading implements a view component for the type CachedImage.
Source: The FFImageLoading github project by Daniel Luberda and Fabien Molinet</description></item><item><title>OxyPlot</title><link>https://docs.fabulous.dev/v1/extensions/oxyplot/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/extensions/oxyplot/</guid><description>Below is an example of an extension for OxyPlot. To use the extension:
Follow the instructions to add references and initialize renderers Add a reference to the Fabulous.XamarinForms.OxyPlot package across your solution.
Here is an example translated from the OxyPlot documentation.
let plotModelCos = let model = PlotModel(Title = &amp;quot;Example 1&amp;quot;) model.Series.Add(new OxyPlot.Series.FunctionSeries(Math.Cos, 0.0, 10.0, 0.1, &amp;quot;cos(x)&amp;quot;)) model let plotModelHeatMap = let model = PlotModel (Title = &amp;quot;Heatmap&amp;quot;) model.</description></item><item><title>SkiaSharp</title><link>https://docs.fabulous.dev/v1/extensions/skiasharp/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/extensions/skiasharp/</guid><description>SkiaSharp is a 2D graphics system for .NET powered by the open-source Skia graphics engine that is used extensively in Google products. You can use SkiaSharp in your Xamarin.Forms applications to draw 2D vector graphics, bitmaps, and text.
The nuget Fabulous.XamarinForms.SkiaSharp implements a view component for the type SKCanvasView.
To use Fabulous.XamarinForms.SkiaSharp, you must
Add a reference to SkiaSharp.Views.Forms across your whole solution. This will add appropriate references to your platform-specific Android and iOS projects too.</description></item><item><title>VideoManager</title><link>https://docs.fabulous.dev/v1/extensions/videomanager/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/extensions/videomanager/</guid><description>The MediaManager plugin allow to play audio and video with Xamarin. Using this VideoManager, you can create a dedicated view to render a video in your fabulous application.
MediaManager has been created by Martijn van Dijk and its original project can be found on its github repository.
The nuget Fabulous.XamarinForms.VideoManager implements a view component for the type VideoView.
To use Fabulous.XamarinForms.VideoView, you must
Add a reference to Plugin.</description></item><item><title>Xamarin.Forms.Maps</title><link>https://docs.fabulous.dev/v1/extensions/xamarinforms-maps/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/extensions/xamarinforms-maps/</guid><description>The nuget Fabulous.XamarinForms.Maps implements an extension for the types Map and Pin.
To use Fabulous.XamarinForms.Maps, you must
Add a reference to Fabulous.XamarinForms.Maps across your whole solution. Additionally follow the instructions to initialize Xamarin.Forms Maps. For example, on Android you must enable Google Play servies, add a call to Xamarin.FormsMaps.Init(this, bundle) to MainActivity.fs and add both and API key and uses-permission to AndroidManifest.xml. After these steps you can use maps in your view function as follows:</description></item></channel></rss>