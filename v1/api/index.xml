<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API Reference on</title><link>https://docs.fabulous.dev/v1/api/</link><description>Recent content in API Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 31 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://docs.fabulous.dev/v1/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Animations</title><link>https://docs.fabulous.dev/v1/api/animations/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/animations/</guid><description>Animations and focus are specified by accessing the underlying Xamarin.Forms control and using Xamarin.Forms animation specifications. The underlying control is usually accessed via a ViewRef, akin to a ref in HTML/JavaScript and React.
A ViewRef must have a sufficient scope that it lives long enough, e.g. a global scope or the scope of the model. The ViewRef can be held in the model itself if necessary.
Initially ViewRef are empty.</description></item><item><title>Custom renderers and Custom controls</title><link>https://docs.fabulous.dev/v1/api/custom-renderer/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/custom-renderer/</guid><description>Custom renderers # In Xamarin.Forms, custom renderers define how a control is rendered on the UI, and are specific to a platform (iOS, Android, etc.).
For example, the default iOSButtonRenderer will render a Xamarin.Forms.Button as a UIKit.UIButton and will handle all the properties such as Text, Color, etc.
Custom renderers are renderers you create to either change the default behavior of an existing renderer or create a completely new one.</description></item><item><title>Effects</title><link>https://docs.fabulous.dev/v1/api/effects/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/effects/</guid><description>Xamarin.Forms user interfaces are rendered using the native controls of the target platform, allowing Xamarin.Forms applications to retain the appropriate look and feel for each platform. Effects allow the native controls on each platform to be customized without having to resort to a custom renderer implementation.
Using Effects in Fabulous.XamarinForms # The recommended way to use an effect in Fabulous is by using the dedicated View.Effect.
This control accepts the effect&amp;rsquo;s exported full name (&amp;quot;SomeResolutionGroup.</description></item><item><title>Fabulous.CodeGen</title><link>https://docs.fabulous.dev/v1/api/codegen-bindings/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/codegen-bindings/</guid><description>Root # { &amp;quot;assemblies&amp;quot;: [ &amp;quot;path/to/A.dll&amp;quot;, &amp;quot;path/to/B.dll&amp;quot; ], &amp;quot;outputNamespace&amp;quot;: &amp;quot;My.Namespace&amp;quot;, &amp;quot;types&amp;quot;: [ // See Type ] } Field Type Required Description Assemblies string array ✅ Yes Paths to dlls containing controls (can be relative to working directory) OutputNamespace string ✅ Yes Namespace under which all the generated code will be added Types Type array ✅ Yes All types to bind Type # { &amp;quot;type&amp;quot;: &amp;quot;Xamarin.</description></item><item><title>Navigation</title><link>https://docs.fabulous.dev/v1/api/navigation/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/navigation/</guid><description>Multiple pages are generated as part of the overall view. Five multi-page navigation models are shown in the AllControls sample:
NavigationPage using push/pop NavigationPage Toolbar TabbedPage CarouselPage MasterDetail NavigationPage using push/pop # The basic principles of implementing push/pop navigation are as follows:
Keep some information in your model indicating the page stack (e.g. a list of page identifiers or page models) Return the current visual page stack in the pages property of NavigationPage.</description></item><item><title>Pop-ups</title><link>https://docs.fabulous.dev/v1/api/popups/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/popups/</guid><description>Pop-ups are a special case in Fabulous for Xamarin.Forms: they are part of the view, but don&amp;rsquo;t follow the same lifecycle as the rest of the UI. In Xamarin.Forms pop-ups are exposed through 2 methods of the current page: DisplayAlert and DisplayActionSheet.
In Fabulous for Xamarin.Forms we only describe what a page should look like and have no access to UI elements. As such, there is no direct implementation of those 2 methods in Fabulous but instead we can use the static property Application.</description></item><item><title>View and performance</title><link>https://docs.fabulous.dev/v1/api/performance/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://docs.fabulous.dev/v1/api/performance/</guid><description>The performance of your app may in some cases be dominated by your view function.
This is particularly the case if many message updates are being generated and processed, though not if other operations dominate such as network latency. Improving the performance of your view function should be done with respect to your overall performance targets and needs.
On each update to the model, the view function is executed. The resulting view is then compared item by item with the previous view and updates are made to the underlying controls.</description></item></channel></rss>